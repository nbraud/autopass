#!/usr/bin/env ruby

require 'yaml'
require 'fileutils'
require 'shellwords'
require 'ostruct'
require 'optionparser'
require 'uri'
require 'cgi'

begin
  require 'rotp'
  HAS_OTP = true
rescue LoadError
  HAS_OTP = false
end

BROWSERS = %w[chrome chromium firefox opera]

config_dir = ENV['XDG_CONFIG_HOME'] || "#{ENV['HOME']}/.config"
config_file = File.join(config_dir, 'autopass', 'config.yml')
unless File.exist?(config_file)
  FileUtils.mkdir_p(File.dirname(config_file))
  File.write config_file, <<EOF
---
# you can insert any environment variable inside %{} for it to be replaced by
# the value of that variable. If it needs to be at the beginning of the string
# you have to escape it (e.g. `foo: %{BAR}` will raise an error, `foo: '%{BAR}'`
# will work though)

# key_bindings:
#   autotype_tan: Alt+t
#   copy_username: Alt+u
#   copy_password: Alt+p
#   open_browser: Alt+o

# clipboard command to use:
# (default)
#   clip_command: 'xclip'
# or
#   clip_command: 'xclip -selection clipboard'
EOF
  puts "Copied example config to #{config_file}.  Please edit"
  exit
end

SYM_ENV = Hash[ENV.map { |var, value| [var.to_sym, value] }]

def expand_config(item)
  case item
  when Hash
    ostruct = OpenStruct.new
    item.each { |key, value| ostruct[key] = expand_config(value) }
    ostruct
  when Array then item.map(&method(:expand_config))
  when String
    if item =~ /%\{.+\}/
      item % SYM_ENV
    else
      item
    end
  else item
  end
end

class OpenStruct
  def merge!(other)
    other.each_pair do |key, value|
      own_value = self[key]
      self[key] = if value.is_a?(OpenStruct) && own_value.is_a?(OpenStruct)
                    own_value.merge!(value)
                  else
                    value
                  end
    end
    self
  end

  def reverse_merge!(other)
    other.each_pair do |key, value|
      own_value = self[key]
      self[key] = if value.is_a?(OpenStruct) && own_value.is_a?(OpenStruct)
                    own_value.reverse_merge!(value)
                  elsif own_value.nil?
                    value
                  else
                    own_value
                  end
    end
    self
  end
end

DEFAULT_CONFIG = expand_config(
  prompt: 'Search:',
  password_store: '%{HOME}/.password-store',
  username_key: 'user',
  password_key: 'pass',
  autotype_3: ':otp',
  key_bindings: {
    copy_username: 'Alt+u',
    copy_password: 'Alt+p',
    autotype_tan: 'Alt+t',
    open_browser: 'Alt+o',
    copy_otp: 'Alt+c'
  },
  alt_delay: 0.5,
  clip_command: 'xclip',
)

CONFIG = expand_config(YAML.load_file(config_file) || {})
CONFIG.reverse_merge!(DEFAULT_CONFIG)
CONFIG[:autotype_1] ||= CONFIG[:password_key]
CONFIG[:autotype_2] ||= CONFIG[:username_key]

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [OPTIONS]"
  opts.separator ""
  opts.separator 'Rofi frontend for pass and copy or autotype your passwords.'
  opts.separator ""
  opts.separator "OPTIONS:"

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

unless Dir.exist?(CONFIG.password_store)
  abort('It seems that you havent set up a password store yet. Do so by running `pass init <YOUR_KEY_ID>`')
end

def notify(message, type = :normal, milliseconds = 5000)
  system('notify-send', '-a', File.basename(__FILE__, '.rb').to_s, '-u', type.to_s, '-t', milliseconds.to_s, message.to_s)
end

class Entry
  attr_reader :name, :attributes

  def initialize(name)
    content = `pass show #{Shellwords.escape(name)}`
    pass = content.lines.first.chomp
    yaml = (content.lines[1..-1] || [])
               .select { |line| line =~ /^.+:\s.+/ }
               .join
    otp_uri = content.lines.select { |line| line.start_with?("otpauth://") }.first
    begin
      metadata = expand_config(YAML.load(yaml) || {})
    rescue Psych::SyntaxError => e
      $stderr.puts "Failed parsing yaml of entry '#{name}':"
      $stderr.puts yaml
      $stderr.puts e.message
      metadata.error = true
      metadata.error_message = e.message
    end
    begin
      metadata.merge!(CONFIG.password_key => pass)
      if otp_uri
        metadata.merge!(parse_otp_uri(otp_uri))
      end
    rescue NoMethodError => e
      metadata = OpenStruct.new(error: true)
      metadata.error_message = e.message
    end
    @name = name
    @attributes = metadata
  end

  def autotype!(index = 0)
    keys = autotype_keys(index)
    if autotype_values(keys).empty?
      notify("No key '#{keys.join('+')}' found for this entry!", :critical)
      return
    end
    sleep CONFIG.alt_delay if index > 0
    focus_window!
    perform_autotype(autotype_values(keys))
  end

  def autotype_tan
    tan = nil
    unless attributes.tan
      notify('This entry has no tan attribute', :critical)
      exit
    end

    tans = attributes.tan.lines
    loop do
      tan_number = ask_tan_number
      tan = tans[tan_number - 1]
      break if tan
      notify("No TAN at index #{tan_number}", :critical)
    end
    focus_window!
    perform_autotype([tan.strip])
  end

  def otp
    unless HAS_OTP
      $stderr.puts("Couldn't require rotp. Install it with `gem install rotp`")
      notify('Couldn\'t require rotp. Install it with `gem install rotp`', :critical)
      exit 1
    end
    unless attributes.otp_secret
      $stderr.puts([
        'No OTP secret found for this entry.',
        'Make sure your entry contains an attribute `otp_secret` like the following:',
        'otp_secret: your_otp_secret',
        'or',
        'otpauth://totp/<display name>?secret=<secret>'
      ])
      notify('No OTP secret found for this entry.', :critical)
      exit 1
    end
    ROTP::TOTP.new(attributes.otp_secret).now
  end

  def autotype_values(keys)
    keys.map { |key| key[0] == ':' ? key : attributes[key] }.compact
  end

  def autotype_keys(index)
    keys = case index
           when 0
             autotype_key = CONFIG.autotype_key || 'autotype'
             attributes[autotype_key] || CONFIG[autotype_key] || [CONFIG.username_key, ':tab', CONFIG.password_key]
           when 1 then attributes.autotype_1 || CONFIG.autotype_1
           when 2 then attributes.autotype_2 || CONFIG.autotype_2
           when 3 then attributes.autotype_3 || CONFIG.autotype_3
           else attributes[:"autotype_#{index}"] || CONFIG[:"autotype_#{index}"] || []
           end
    keys = keys.split(/\s+/) if keys.is_a?(String)
    keys
  end

  def focus_window!
    `xdotool windowfocus --sync #{window_id}`
  end

  def window_id
    [
      attributes.window, # try window
      Regexp.escape(attributes.url || ''), # try url
      "#{attributes.window}.*#{Regexp.union(BROWSERS)}", # try window with browser
      Regexp.escape(name || '') # try name
    ].each do |regex|
      output = search_window_id(regex)
      return output.to_i if output.lines.size == 1
    end

    select_window_id_by_user!
  end

  def match(window_name)
    window_name.match(/#{attributes.window || Regexp.escape(attributes.url || name)}/i)
  end

  def search_window_id(window_regex)
    `xdotool search --onlyvisible --name #{Shellwords.escape(window_regex)}`.chomp
  end

  def select_window_id_by_user!
    notify('Please select the target window')
    xwininfo = `xwininfo -int`
    title = xwininfo.match(/Window id: \d+ "(?<title>.*)"$/)[:title]
    print "selected window: `#{title}` "
    IO.popen(CONFIG.clip_command, 'w+') do |io|
      io.write(title)
      io.close_write
    end
    puts 'copied to clipboard'
    xwininfo[/(?<=Window id: )\d+/]
  end

  def open_url!
    if attributes.url.to_s.empty?
      notify('Cannot find URL in entry', :critical)
    else
      system(ENV['BROWSER'] || 'xdg-open', attributes.url)
    end
  end

  private

  def perform_autotype(values)
    values.each do |value|
      case value
      when ':tab' then `xdotool key Tab`
      when ':enter' then `xdotool key Return`
      else
        type = value == ':otp' ? otp : value
        IO.popen('xdotool type --clearmodifiers --file -', 'w+') do |io|
          io.write(type)
          io.close_write
        end
      end
    end
  end

  def ask_tan_number
    number = nil
    loop do
      IO.popen('rofi -dmenu -p "TAN number:"', 'w+') do |io|
        io.close_write
        number = io.gets
      end
      exit if number.nil?
      break if number.to_i.to_s == number.strip
      notify('Please enter a number')
    end
    number.to_i
  end

  def parse_otp_uri(otp_uri)
    uri = URI.parse(otp_uri)
    params = CGI.parse(uri.query)
    otp_config = {}
    otp_config.merge!('otp_type' => uri.host)
    otp_config.merge!(parse_otp_param(params, 'algorithm'))
    otp_config.merge!(parse_otp_param(params, 'digits'))
    otp_config.merge!(parse_otp_param(params, 'period'))
    otp_config.merge!(parse_otp_param(params, 'secret'))
    otp_config
  end

  def parse_otp_param(query, key)
    param = query.fetch(key, []).first
    if param
      {"otp_#{key}" => param}
    else
      {}
    end
  end

end

class PassBackend
  def initialize
    @entries = {}
    FileUtils.cd(CONFIG.password_store) do
      @entries = Dir['**/*.gpg'].map { |file| file.sub(/\.gpg$/, '') }
    end
  end

  def sorted_entries(focused_window)
    title = focused_window.downcase
    result = @entries.sort_by do |entry|
      entry = entry.downcase
      match = entry.match(title)
      match ? "\0" * title.sub(match[0], '').size : entry
    end
    result
  end
end

focused_window_id = `xdotool getwindowfocus`.chomp.to_i
focused_window_name = `xdotool getwindowname #{focused_window_id}`
pass_backend = PassBackend.new

choice = nil

sorted_entries = pass_backend.sorted_entries(focused_window_name)

rofi_args = %W(-dmenu -i -z -p #{CONFIG.prompt})
rofi_args.concat(['-kb-custom-7', CONFIG.key_bindings.autotype_tan])
rofi_args.concat(['-kb-custom-8', CONFIG.key_bindings.copy_password])
rofi_args.concat(['-kb-custom-9', CONFIG.key_bindings.copy_username])
rofi_args.concat(['-kb-custom-10', CONFIG.key_bindings.open_browser])
rofi_args.concat(['-kb-custom-11', CONFIG.key_bindings.copy_otp])
rofi_args << '-mesg'
msgs = [
  "Alt-1: Autotype #{CONFIG.autotype_1}",
  "Alt-2: Autotype #{CONFIG.autotype_2}",
  "Alt-3: Autotype #{CONFIG.autotype_3}",
  "Alt-{4-6}: Alternative autotypes",
  "#{CONFIG.key_bindings.autotype_tan}: Autotype TAN",
  "#{CONFIG.key_bindings.copy_password}: Copy password",
  "#{CONFIG.key_bindings.copy_username}: Copy username",
  "#{CONFIG.key_bindings.copy_otp}: Copy OTP-Code",
  "#{CONFIG.key_bindings.open_browser}: Open URL in browser"
]
half = (msgs.length / 2.0).ceil
msgs = msgs.first(half).map.with_index do |msg, index|
  left = msg.to_s.ljust(40, ' ')
  right = msgs[half+index]
  [left, right].join
end
rofi_args << msgs.join("\n")


IO.popen(['rofi', *rofi_args], 'w+') do |io|
  io.puts(*sorted_entries)
  io.close_write
  choice = io.gets
  exit if choice.nil?
end

return_value = $?.exitstatus

@entry = Entry.new(choice.chomp)
if @entry.attributes.error == true
  system('rofi', '-e', @entry.attributes.error_message)
  exit 1
end

def copy(attribute, notification_seconds = 5)
  clear_clip_pidfile = '/tmp/autopass-clear-clip.pid'
  value = attribute == :otp ? @entry.otp : @entry.attributes[attribute]

  if File.exist?(clear_clip_pidfile)
    Process.kill(:INT, File.read(clear_clip_pidfile).to_i)
  end
  IO.popen(CONFIG.clip_command, 'w+') { |io| io.print(value) }
  notify("Copied #{attribute} to clipboard. Clearing in 45 seconds", :normal, notification_seconds*1000)
  fork do
    File.write(clear_clip_pidfile, Process.pid)
    sleep(45)
    IO.popen(CONFIG.clip_command, 'w+') { |io| io.print('') }
    File.delete(clear_clip_pidfile)
  end
end

case return_value
when 0 then @entry.autotype!
when 10..15 then @entry.autotype!(return_value - 9)
when 16 then @entry.autotype_tan
when 17 then copy(CONFIG.password_key)
when 18 then copy(CONFIG.username_key)
when 19 then @entry.open_url!
when 20 then copy(:otp, 10)
end
